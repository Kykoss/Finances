@page "/recipients"
@rendermode InteractiveServer
@attribute [StreamRendering]

@using Finanzknabe.Components.Helper
@using Finanzknabe.Contracts
@using Finanzknabe.Dal.Extensions
@using Finanzknabe.Data
@using Microsoft.EntityFrameworkCore
@using System.Collections.ObjectModel

@inject AppDbContext AppDbContext

<PageTitle>Recipients</PageTitle>

@if (this.FilteredRecipients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (!this.IsEditMode)
    {
        <button class="icon-button" @onclick="StartEditMode"><img class="icon-image" src="images\icons\edit.png" /></button>
    }
    else
    {
        <button class="icon-button" @onclick="SaveChanges"><img class="icon-image" src="images\icons\save.png" /></button>
        <button class="icon-button" @onclick="CancelChanges"><img class="icon-image" src="images\icons\cancel.png" /></button>
    }
    <hr />
    <div style="display: flex; justify-content:space-between" >
        <select class="form-select"
        style="width: 200px"
        disabled="@this.IsEditMode"
                @onchange="@((ChangeEventArgs e) => this.FilterChanged(TransactionTypeHelper.GetTransactionTypeOrDefault(e)))">
            <option>Alle Empfänger</option>

            @foreach (TransactionType type in Enum.GetValues(typeof(TransactionType)))
            {
                <option>@TransactionTypeHelper.TransactionTypeConverter.ConvertToString(type)</option>
            }
        </select>
        <input placeholder="Search for a recipient..."
        id="filter-input"
        disabled="@this.IsEditMode"
        @onchange="@((ChangeEventArgs e) => this.FilterChanged((string)e.Value!))" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Standardkategorie</th>
                <th>Empfaenger</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipient in this.FilteredRecipients)
            {
                <tr>
                    <td width="250px">
                        @if (this.IsEditMode)
                        {
                            <select value=@TransactionTypeHelper.TransactionTypeConverter.ConvertToString(recipient.DefaultTransactionType)
                            style="margin-right: 32px"
                            @onchange="@((ChangeEventArgs e) => recipient.DefaultTransactionType = (TransactionType)TransactionTypeHelper.GetTransactionTypeOrDefault(e)!)">
                                @foreach (TransactionType type in Enum.GetValues(typeof(TransactionType)))
                                {
                                    <option>@TransactionTypeHelper.TransactionTypeConverter.ConvertToString(type)</option>
                                }
                            </select>
                        }

                        <img class="icon-image"
                        src="@Path.Combine($@"images\transactionTypes\{recipient.DefaultTransactionType.ToString()}.png")"
                        title="this.TransactionTypeConverter.ConvertToString(recipient.DefaultTransactionType)" />
                    </td>
                    <td>@recipient.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private DbSet<Recipient>? AllRecipients;
    private ObservableCollection<Recipient> FilteredRecipients = new ObservableCollection<Recipient>();
    private bool IsEditMode;

    private TransactionType? TransactionTypeFilter;
    private string NameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        this.AllRecipients = this.AppDbContext.Set<Recipient>();
        this.FilteredRecipients = this.AllRecipients.ToObservableCollection();
    }

    /// <summary>
    /// Updates the TransactionTypeFilter and filters FilteredRecipients to only display Recipients matching the set filters
    /// </summary>
    /// <param name="defaultTransactionType">The desired DefaultTransactionType</param>
    /// <returns>True if successful, false if an error occured</returns>
    private bool FilterChanged(TransactionType? defaultTransactionType)
    {
        this.TransactionTypeFilter = defaultTransactionType;
        return this.FilterRecipients();
    }

    /// <summary>
    /// Updates the NameFilter and filters FilteredRecipients to only display Recipients matching the set filters
    /// </summary>
    /// <param name="string">The desired search string</param>
    /// <returns>True if successful, false if an error occured</returns>
    private bool FilterChanged(string searchString)
    {
        this.NameFilter = searchString;
        return this.FilterRecipients();
    }

    private bool FilterRecipients()
    {
        if (this.AllRecipients is not null)
        {
            if (this.TransactionTypeFilter is null)
            {
                this.FilteredRecipients = this.AllRecipients!.Where(x => x.Name.Contains(this.NameFilter)).ToObservableCollection();
            }
            else
            {
                this.FilteredRecipients = this.AllRecipients!.Where(x => x.Name.Contains(this.NameFilter) && x.DefaultTransactionType == this.TransactionTypeFilter).ToObservableCollection();
            }
            
            return true;
        }

        return false;
    }

    private void StartEditMode()
    {
        this.IsEditMode = true;
    }

    private void SaveChanges()
    {
        this.AppDbContext.SaveChanges();
        this.IsEditMode = false;
    }

    private void CancelChanges()
    {
        this.AppDbContext.ChangeTracker.Clear();
        this.IsEditMode = false;
    }
}
