@page "/transactions"
@rendermode InteractiveServer
@attribute [StreamRendering]

@using Finanzknabe.Components.Extensions
@using Finanzknabe.Components.Helper
@using Finanzknabe.Contracts
@using Finanzknabe.Dal.Extensions
@using Finanzknabe.Data
@using Microsoft.EntityFrameworkCore
@using System.Collections.ObjectModel

@inject AppDbContext AppDbContext

<PageTitle>Transaktionen</PageTitle>

@if (this.FilteredTransactions == null)
{
    <p><em>Loading...</em></p>
}
else
{ 
    @if (!this.IsEditMode)
    {
        <button class="icon-button" @onclick="StartEditMode"><img class="icon-image" src="images\icons\edit.png" /></button>
    }
    else
    {
        <button class="icon-button" @onclick="SaveChanges"><img class="icon-image" src="images\icons\save.png" /></button>
        <button class="icon-button" @onclick="CancelChanges"><img class="icon-image" src="images\icons\cancel.png" /></button>
    }
    <hr />
    <div style="display: flex; justify-content:space-between">
        <div style="margin: 4px 0px 8px 0px">
            <select class="form-select"
            style="width: 200px; display: inline-block; margin: 0px 24px 0px 0px"
            @onchange="@((ChangeEventArgs e) => this.TransactionTypeFilter = TransactionTypeHelper.GetTransactionTypeOrDefault(e))">
                <option>Alle Empfänger</option>

                @foreach (TransactionType type in Enum.GetValues(typeof(TransactionType)))
                {
                    <option>@TransactionTypeHelper.TransactionTypeConverter.ConvertToString(type)</option>
                }
            </select>

            <InputDate @bind-Value="this.DateFilterFrom" class="input-date"/>
            -
            <InputDate @bind-Value="this.DateFilterTo" class="input-date" />
        </div>

        <input @bind-value=this.RecipientsPurposeFilter
        placeholder="Search for a transaction..."
        id="filter-input"
        style="margin: 4px 0px 8px 0px"/>
    </div>
    <table class="table">

        <thead>
            <tr>
                <th>Datum</th>
                <th>Monatlich</th>
                <th>Transaktionstyp</th>
                <th>Empfänger</th>
                <th>Betrag</th>
                <th>Zahlungstyp</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in this.FilteredTransactions)
            {
                <tr>
                    <td width="100px">@transaction.Date.ToShortDateString()</td>
                    <td align="center" width="30px">
                        <input type="checkbox" @bind-value="@transaction.Monthly" checked="@transaction.Monthly" />
                    </td>
                    <td align="center" width=@TransactionTypeColumnLength>
                        @if (this.IsEditMode)
                        {
                            <select value=@TransactionTypeHelper.TransactionTypeConverter.ConvertToString(transaction.TransactionType)
                            style="margin-right: 32px"
                            @onchange="@((ChangeEventArgs e) => transaction.TransactionType = (TransactionType)TransactionTypeHelper.GetTransactionTypeOrDefault(e)!)">
                                @foreach (TransactionType type in Enum.GetValues(typeof(TransactionType)))
                                {
                                    <option>@TransactionTypeHelper.TransactionTypeConverter.ConvertToString(type)</option>
                                }
                            </select>
                        }
                        <img class="icon-image" src="@Path.Combine($@"images\transactionTypes\{transaction.TransactionType.ToString()}.png")" title="@transaction.TransactionType" />
                    </td>
                    <td>@this.GetRecipientInfo(transaction)</td>
                    <td>@string.Format("{0:C}", transaction.Amount)</td>
                    <td align="center"><img class="icon-image" src="@Path.Combine($@"images\paymentTypes\{transaction.PaymentType.ToString()}.png")" title="@transaction.PaymentType" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private bool myIsEditMode = false;

    private IQueryable<Transaction>? AllTransactions;
    private ObservableCollection<Transaction>? FilteredTransactions;
    private int TransactionTypeColumnLength = 80;

    private bool IsEditMode
    {
        get => this.myIsEditMode;
        set
        {
            if (this.myIsEditMode != value)
            {
                this.myIsEditMode = value;
                if (this.IsEditMode)
                {
                    this.TransactionTypeColumnLength = 250;
                }
                else
                {
                    this.TransactionTypeColumnLength = 80;
                }
            }
        }
    }

    // Filters

    private TransactionType? myTransactionTypeFilter;
    private string myRecipientsPurposeFilter = string.Empty;
    private DateOnly? myDateFilterFrom;
    private DateOnly? myDateFilterTo;

    private TransactionType? TransactionTypeFilter
    {
        get => this.myTransactionTypeFilter;
        set
        {
            if (this.myTransactionTypeFilter != value)
            {
                this.myTransactionTypeFilter = value;
                this.FilterRecipients();
            }
        }
    }

    private string RecipientsPurposeFilter
    { 
        get => this.myRecipientsPurposeFilter;
        set
        {
            if (this.myRecipientsPurposeFilter != value)
            {
                this.myRecipientsPurposeFilter = value;
                this.FilterRecipients();
            }
        } 
    }

    private DateOnly? DateFilterFrom
    {
        get => this.myDateFilterFrom;
        set
        {
            if (this.myDateFilterFrom != value)
            {
                this.myDateFilterFrom = value;

                if (this.DateFilterFrom is not null && this.DateFilterTo is not null)
                {
                    this.FilterRecipients();
                }
            }
        }
    }

    private DateOnly? DateFilterTo
    {
        get => this.myDateFilterTo;
        set
        {
            if (this.myDateFilterTo != value)
            {
                this.myDateFilterTo = value;

                if (this.DateFilterFrom is not null && DateFilterTo is not null)
                {
                    this.FilterRecipients();
                }
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        this.AllTransactions = AppDbContext.Set<Transaction>().Include(x => x.Recipient).Include(x => x.Account);

        this.SetInitialDateFilter();
    }

    private string GetRecipientInfo(Transaction transaction)
    {
        if (transaction.PaymentType == PaymentType.MonthClosing)
        {
            return transaction.Purpose;
        }

        if (transaction.PaymentType == PaymentType.PayPal)
        {
            // Trim the ugly PayPal Prefix (e.g. '1033602738945/PP.7051.PP/.')
            var splittedPurpose = transaction.Purpose.Split(".PP/.");

            return splittedPurpose[splittedPurpose.Length - 1];
        }

        return transaction.Recipient.GetDisplayName();
    }

    private void SetInitialDateFilter()
    {
        if (this.AllTransactions is null)
        {
            this.DateFilterFrom = new(DateTime.Today.Year, 1, 1); 
            this.DateFilterTo = new(DateTime.Today.Year, 12, 31);
        }
        else
        {
            var lastTransactionDate = this.AllTransactions.Max(x => x.Date);

            this.DateFilterFrom = new(lastTransactionDate.Year, lastTransactionDate.Month, 1);
            this.DateFilterTo = new(lastTransactionDate.Year, lastTransactionDate.Month, DateTime.DaysInMonth(lastTransactionDate.Year, lastTransactionDate.Month));
        }
    }

    private bool FilterRecipients()
    {
        if (this.AllTransactions is not null)
        {
            var filteredTransactions = this.AllTransactions!.Where(x => x.Recipient.Name.Contains(this.RecipientsPurposeFilter) || x.Purpose.Contains(this.RecipientsPurposeFilter));

            if (this.TransactionTypeFilter is not null)
            {
                filteredTransactions = filteredTransactions.Where(x => x.TransactionType == this.TransactionTypeFilter);
            }

            if (this.DateFilterFrom is not null && this.DateFilterTo is not null)
            {
                filteredTransactions = filteredTransactions.Where(x => x.Date >= this.DateFilterFrom && x.Date <= this.DateFilterTo);
            }

            this.FilteredTransactions = filteredTransactions.ToObservableCollection();

            return true;
        }

        return false;
    }

    private void StartEditMode()
    {
        this.IsEditMode = true;
    }

    private void SaveChanges()
    {
        this.AppDbContext.SaveChanges();
        this.IsEditMode = false;
    }

    private void CancelChanges()
    {
        this.AppDbContext.ChangeTracker.Clear();
        this.IsEditMode = false;
    }
}
